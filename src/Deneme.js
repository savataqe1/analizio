/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF, Points } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import fragment from "./shaders/fragment";
import vertex from "./shaders/vertex";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import gsap, { Power4 } from "gsap";

gsap.registerPlugin(ScrollTrigger);
const TorusShaderMaterial = {
  vertexShader: vertex,
  fragmentShader: fragment,
};
export default function Model({}) {
  const group = useRef();
  const test = useRef();
  const { nodes, materials } = useGLTF("/deneme.gltf");
  console.log(nodes);
  useEffect(() => {
    const tl1 = gsap.timeline({
      scrollTrigger: {
        trigger: "body",
        start: "top top",

        end: "bottom bottom",

        scrub: 1,
        markers: true,
      },
    });
    for (const key in props) {
      if (props[key].start !== props[key].end) {
        tl1.to(group.current.material.uniforms[key], {
          ease: Power4.easeOut,
          value: props[key].start - (props[key].end + props[key].start),
        });
      }
    }
  });

  const props = {
    uFrequency: {
      start: 0,
      value: 0,
      end: 4,
    },
    uAmplitude: {
      start: 4,
      value: 4,
      end: 4,
    },
    uDensity: {
      start: 1,
      value: 1,
      end: 1,
    },
    uStrength: {
      start: 0,
      value: 0,
      end: 1.1,
    },
    // fragment
    uDeepPurple: {
      // max 1
      start: 1,
      value: 1,
      end: 0,
    },
    uOpacity: {
      // max 1
      value: 0.01,
      start: 0.01,
      end: 0.66,
    },
  };

  useFrame((state) => {
    // tl1.to(group.current.rotation, {
    //   z: 100,
    // });
    // gsap.to(group.current.rotation, {
    //   x: Math.PI * 2,
    // });
    // group.current.material.uniforms.uDensity = THREE.MathUtils.lerp(
    //   group.current.material.uniforms.uDensity,
    //   4,
    //   0.5,
    // );
    // state.camera.lookAt(group.current.position);
    // group.current.rotation.z += 0.005;
    // group.current.material.uniforms.uDensity.value = 2;
    // group.current.material.uniforms.uAmplitude.value = state.clock.elapsedTime;
    // group.current.material.uniforms.uStrength.value =
    //   0.5 + state.clock.elapsedTime / 50;
  });

  return (
    // <group position={[-0.04, 2, 0.05]} rotation={[2.19, 0, 0]} scale={0.3}>
    <group position={[2, 0, 0.05]} rotation={[2.19, 0, 0]} scale={1}>
      <mesh
        ref={group}
        position={[-0.18, 0.15, 1.2]}
        rotation={[-0.5, -0.38, 0.04]}
        dispose={null}
        geometry={nodes["default"].geometry}
      >
        <shaderMaterial
          attach="material"
          uniforms={{ ...props }}
          args={[TorusShaderMaterial]}
          blendFunction={THREE.AdditiveBlending}
          color={"black"}
          transparent
          wireframe
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/deneme.gltf");
