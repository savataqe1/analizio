/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import fragment from "./shaders/fragment";
import vertex from "./shaders/vertex";

const TorusShaderMaterial = {
  vertexShader: vertex,
  fragmentShader: fragment,
};
export default function Model({ ...props }) {
  const group = useRef();
  const test = useRef();
  const { nodes, materials } = useGLTF("/deneme.gltf");

  useFrame((state) => {
    // group.current.material.uniforms.uFrequency.value = 5;

    group.current.material.uniforms.uDeepPurple.value =
      state.clock.elapsedTime / 10;

    // group.current.material.uniforms.uDestiny.value = 0;
    //group.current.material.uniforms.uAmplitude = 20;
    group.current.material.uniforms.uOpacity.value =
      state.clock.elapsedTime / 10;
    // group.current.material.uniforms.uStrength = state.clock.elapsedTime;
  });

  return (
    <group position={[-0.04, -0.07, 0.05]} rotation={[2.19, 0, 0]}>
      <mesh
        ref={group}
        position={[-0.18, 0.15, 1.2]}
        rotation={[-0.5, -0.38, 0.04]}
        dispose={null}
        geometry={nodes["default"].geometry}
      >
        <shaderMaterial
          attach="material"
          uniforms={{ ...props }}
          args={[TorusShaderMaterial]}
          wireframe
          blendFunction={THREE.AdditiveBlending}
          transparent
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/deneme.gltf");
